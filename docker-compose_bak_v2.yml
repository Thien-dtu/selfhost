services:

  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - TZ=${TZ}
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_SCHEDULE=0 0 4 * * *
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: 128M

  postgres:
    image: postgres:17
    user: "1000:1000"
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=shared_db
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /mnt/g/selfhost/data/postgres:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - selfnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d shared_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.60'
          memory: 1G

  # immich_postgres:
  #   container_name: immich_postgres
  #   image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0@sha256:fa4f6e0971f454cd95fec5a9aaed2ed93d8f46725cc6bc61e0698e97dba96da1
  #   # image: custom-immich-postgres:14-vectorchord0.3.0-pgvectors0.2.0
  #   user: "1000:1000"
  #   environment:
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=immich
  #     - POSTGRES_INITDB_ARGS=--data-checksums
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   volumes:
  #     - /mnt/g/selfhost/data/immich_postgres:/var/lib/postgresql/data
  #     #- ./postgresql.conf:/etc/postgresql/postgresql.conf
  #   # command: postgres -c shared_preload_libraries=vectors.so -c 'search_path="$user", public, vectors.so' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=256MB -c wal_compression=on
  #   command: postgres -c shared_preload_libraries='vectors.so,vchord' -c 'search_path="$user", public, vectors.so' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=256MB -c wal_compression=on
  #   #command: postgres -c config_file=/etc/postgresql/postgresql.conf
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d immich"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.60'
  #         memory: 1G

  # homepage:
  #   image: ghcr.io/gethomepage/homepage:latest
  #   container_name: homepage
  #   volumes:
  #     - /mnt/g/selfhost/data/homepage:/app/config
  #   environment:
  #     - TZ=${TZ}
  #     - HOMEPAGE_ALLOWED_HOSTS=${HOMEPAGE_ALLOWED_HOSTS}
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: 128M

  # portainer:
  #   image: portainer/portainer-ce:latest
  #   container_name: portainer
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /mnt/g/selfhost/data/portainer:/data
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: 128M

  # uptime-kuma:
  #   image: louislam/uptime-kuma:latest
  #   container_name: uptime-kuma
  #   volumes:
  #     - /mnt/g/selfhost/data/uptime-kuma:/app/data
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: 128M

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    environment:
      - DATABASE_URL=postgres://admin:${POSTGRES_PASSWORD}@postgres:5432/shared_db
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=true
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /mnt/g/selfhost/data/vaultwarden:/data:rw
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M

  # nextcloud:
  #   image: nextcloud:latest
  #   container_name: nextcloud
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - NEXTCLOUD_ADMIN_USER=admin
  #     - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_DB=nextcloud_db
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     # - REDIS_HOST=redis
  #     # - REDIS_PORT=6379
  #   volumes:
  #     - /mnt/g/selfhost/data/nextcloud/html:/var/www/html:rw
  #     - /mnt/g/selfhost/data/nextcloud/custom_apps:/var/www/html/custom_apps:rw
  #     - /mnt/g/selfhost/data/nextcloud/config:/var/www/html/config:rw
  #     - /mnt/g/selfhost/data/nextcloud/data:/var/www/html/data:rw
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #       restart: true
  #     # redis:
  #     #   condition: service_healthy
  #     #   restart: true
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost/status.php"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 60s
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.60'
  #         memory: 1G

  # redis:
  #   image: redis:alpine
  #   container_name: redis
  #   volumes:
  #     - /mnt/g/selfhost/data/redis:/data
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: 128M

  broker:
    image: docker.io/library/redis:8
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    restart: unless-stopped
    volumes:
      - /mnt/g/selfhost/data/paperless/redisdata:/data
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M

  # paperless:
  #   user: "0:0"
  #   image: ghcr.io/paperless-ngx/paperless-ngx:latest
  #   container_name: paperless
  #   environment:
  #     - PAPERLESS_URL=https://paperless.buiducthien.store
  #     - PAPERLESS_TIME_ZONE=${TZ}
  #     - PAPERLESS_ADMIN_USER=admin
  #     - PAPERLESS_ADMIN_PASSWORD=${PAPERLESS_ADMIN_PASSWORD}
  #     - PAPERLESS_DBHOST=postgres
  #     - PAPERLESS_DBNAME=paperless_db
  #     - PAPERLESS_DBUSER=admin
  #     - PAPERLESS_DBPASS=${POSTGRES_PASSWORD}
  #     - PAPERLESS_OCR_LANGUAGE=vie
  #     - PAPERLESS_REDIS=redis://broker:6379
  #     - PAPERLESS_SECRET_KEY=${PAPERLESS_SECRET_KEY}
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   volumes:
  #     - /mnt/g/selfhost/data/paperless/data:/usr/src/paperless/data
  #     - /mnt/g/selfhost/media/paperless/media:/usr/src/paperless/media
  #     - /mnt/g/selfhost/media/paperless/export:/usr/src/paperless/export
  #     - /mnt/g/selfhost/media/paperless/consume:/usr/src/paperless/consume
  #   depends_on:
  #     - postgres
  #     - broker
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.40'
  #         memory: 768M

  # immich-server:
  #   container_name: immich_server
  #   image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
  #   volumes:
  #     - ${UPLOAD_LOCATION}:/usr/src/app/upload
  #     - /etc/localtime:/etc/localtime:ro
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:2283/health"]
  #     interval: 30s
  #     timeout: 15s
  #     retries: 10
  #   environment:
  #     - DB_HOST=immich_postgres
  #     - DB_HOSTNAME=immich_postgres
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_DATABASE_NAME=immich
  #     - REDIS_HOST=immich_redis
  #     - REDIS_HOSTNAME=immich_redis
  #     - UPLOAD_MAX_TIMEOUT=600000
  #     - REDIS_PORT=6379
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=Asia/Ho_Chi_Minh
  #     - NODE_ENV=production
  #     - SERVER_PORT=2283
  #     - SERVER_HOST=0.0.0.0
  #     - MAX_FILE_SIZE=10000000000
  #     - MAX_UPLOAD_SIZE=10000000000
  #     - MAX_UPLOAD_FILES=1000
  #     - UPLOAD_CHUNK_SIZE=100000000
  #   ports:
  #     - "2283:2283"
  #   depends_on:
  #     immich_postgres:
  #       condition: service_healthy
  #       restart: true
  #     immich_redis:
  #       condition: service_healthy
  #       restart: true
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.60'
  #         memory: 1G

  # immich-machine-learning:
  #   container_name: immich_machine_learning
  #   image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
  #   volumes:
  #     - /mnt/g/selfhost/data/immich-model-cache:/cache
  #   environment:
  #     - DB_HOST=immich_postgres
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_DATABASE_NAME=immich
  #     - REDIS_HOST=immich_redis
  #     - REDIS_PORT=6379
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 2G

  # immich_redis:
  #   container_name: immich_redis
  #   image: docker.io/valkey/valkey:8-bookworm@sha256:ff21bc0f8194dc9c105b769aeabf9585fea6a8ed649c0781caeac5cb3c247884
  #   command: redis-server --maxmemory 128mb --maxmemory-policy noeviction
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: 128M

  # netdata:
  #   image: netdata/netdata:latest
  #   container_name: netdata
  #   hostname: netdata
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /mnt/g/selfhost/data/netdata:/var/lib/netdata
  #   environment:
  #     - TZ=${TZ}
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   cap_add:
  #     - SYS_PTRACE
  #   security_opt:
  #     - apparmor:unconfined
  #   restart: unless-stopped
  #   networks:
  #     - selfnet
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: 128M

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    command: tunnel --no-autoupdate run
    restart: unless-stopped
    networks:
      - selfnet
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M

networks:
  selfnet:
    driver: bridge